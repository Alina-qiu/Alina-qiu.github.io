<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML插入图片与CSS背景图片的区别</title>
      <link href="/2020/08/12/%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E4%B8%8E%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/08/12/%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E4%B8%8E%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>1、插入图片img为行内块元素，是一个盒子模型，占文档流的位置，图片加载出错时会出现红叉；</p><p>​      背景图片不占文档流，在图片加载失败时，不会有占位标记，图片加载出错时不会出现红叉。</p><p>2、插入图片移动位置通过margin 和 padding实现；</p><p>​      背景图片移动通过background-position移动。</p><p>3、插入图片更改大小通过width 和 height实现；</p><p>​      背景图片只能通过background-size。</p><p>4、插入图片一般用在产片展示类，背景图片用于小图标背景或者超大背景图片。</p><p>5、盒子中使用背景图片需要注意盒子尺寸和背景图片尺寸匹配。</p><p>6、直接插入图片会多出4px，设置背景图片给定高度不会</p><p>​      去除图片底侧缝隙(低版本浏览器)：</p><p>​      解决方法一：给img添加display: block; 转换为块级元素</p><p>​      解决方法二：给img添加vertical-align: middle | top</p><p>7、css中的图片以背景图形式存在，写在html中的图片以标签形式存在。在网页加载过程中，以css背景存在的图片会等到html结构加载完成才开始加载；</p><p>而html中的img标签是网页结构（内容）的一部分会在加载结构的过程中加载。</p><p>8、在一个单纯由HTML和CSS组成的页面中，背景图片总是最后加载的，那么假若想要使用较小的背景图片作为占位符，用于在加载较大的图片或者Flash文件时给用户以提示，大部分时候恐怕是达不到效果的，因为背景图片有时甚至会在大图片或Flash文件加载完成之后才会被加载。</p><p>9、通常非内容的图片（即用来修饰页面的元素）就写在css里，如果是内容性的图片就写在html中。比如，你要做一个漂亮相框的相册，那么修饰边框的图片就写在css里，相框里的内容照片就写在html中。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>babel归纳总结</title>
      <link href="/2020/04/19/babel%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/"/>
      <url>/2020/04/19/babel%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="一、babel是什么"><a href="#一、babel是什么" class="headerlink" title="一、babel是什么"></a>一、babel是什么</h1><p>babel是将目标环境（浏览器）通过打补丁升级成支持最新javascript语法的环境的工具。babel就是处理兼容的转译工具。</p><p>babel的编译过程分为3步，解析（parse），转换（transform），生成（generate），对应的三个插件分别是<code>Babylon</code>、<code>babel-traverse</code>、<code>babel-generator</code>。<br>babylon将源码转换为抽象语法树（AST）；</p><p>babel-traverse通过AST生成一个便于操作、转换的path对象，供我们的babel插件处理；</p><p>babel-generator读取AST并将其转换为代码和源码映射。</p><h1 id="二、通过vue中的babel配置来了解babel"><a href="#二、通过vue中的babel配置来了解babel" class="headerlink" title="二、通过vue中的babel配置来了解babel"></a>二、通过vue中的babel配置来了解babel</h1><p>vue脚手架生成的项目在<code>.babelrc</code>文件中的配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;presets&quot;</span>: [<br>    [<span class="hljs-string">&quot;env&quot;</span>, &#123;<br>      <span class="hljs-attr">&quot;modules&quot;</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">&quot;targets&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;browsers&quot;</span>: [<span class="hljs-string">&quot;&gt; 1%&quot;</span>, <span class="hljs-string">&quot;last 2 versions&quot;</span>, <span class="hljs-string">&quot;not ie &lt;= 8&quot;</span>]<br>      &#125;<br>    &#125;],<br>    <span class="hljs-string">&quot;stage-2&quot;</span><br>  ],<br>  <span class="hljs-attr">&quot;plugins&quot;</span>: [<span class="hljs-string">&quot;transform-vue-jsx&quot;</span>, <span class="hljs-string">&quot;transform-runtime&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="plugin配置项"><a href="#plugin配置项" class="headerlink" title="plugin配置项"></a>plugin配置项</h2><p>babel插件推崇的是功能的单一性，就是每个插件的功能尽可能的单一，比如要使用es6的箭头函数，那就可以装一个转换插件<code>npm i -D @babel/plugin-transform-arrow-functions</code>，将其写进<code>.babelrc</code>文件里就行了：<a href="https://babeljs.io/docs/en/babel-plugin-transform-arrow-functions">详情</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;presets&quot;</span>: [],<br>  <span class="hljs-attr">&quot;plugins&quot;</span>: [<span class="hljs-string">&quot;@babel/plugin-transform-arrow-functions&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，我们写的：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(a)</span> =&gt; [...a]<br></code></pre></td></tr></table></figure><p>会被该插件转换为：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title"></span>(a) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">[...a]</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="presets配置项"><a href="#presets配置项" class="headerlink" title="presets配置项"></a>presets配置项</h2><p>然而，js发展很快，每一次版本的更新都会添加很多东西，如果一个个设置就很麻烦，所以就可以采用<code>presets</code>配置项。<code>npm i -D babel-preset-es2015</code>，然后配置<code>.babelrc</code>。<a href="https://babeljs.io/docs/en/6.26.3/babel-preset-es2015">详情</a></p><p>这里暂时先用babel6的写法，babel7里也可以用babel-preset-es2015，但是文档里去掉了，es2015、es2016、es2017（2018年的东西直接写在env里了，7月份2019年的新标准就要来罗@_@）等都被放在env里面了，以后这几个preset会不会砍掉就不知道咯。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;es2015&quot;</span>],<br>  <span class="hljs-attr">&quot;plugins&quot;</span>: []<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们就可以使用包括箭头函数在内的es6的新<code>语法</code>而不用去担心兼容问题。这下这两个的关系也就清晰了，**<code>presets</code>里面配置的是一些<code>plugins</code>集合**</p><p>在<code>babel 7.3.0</code>里面，<code>presets</code> – <code>对应插件</code>有这些：</p><ul><li>env – <code>@babel/preset-env</code></li><li>stage-0 – <code>@babel/preset-stage-0</code></li><li>stage-1 – <code>@babel/preset-stage-1</code></li><li>stage-2 – <code>@babel/preset-stage-2</code></li><li>stage-3 – <code>@babel/preset-stage-3</code></li><li>flow – <code>@babel/preset-flow</code></li><li>react – <code>@babel/preset-react</code></li><li>minify – <code>babel-preset-minify</code></li><li>typescript – <code>@babel/preset-typescript</code></li></ul><h2 id="env"><a href="#env" class="headerlink" title="env"></a>env</h2><p>在presets配置里面，我们看到了：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">[<span class="hljs-string">&quot;env&quot;</span>, &#123;<br>  <span class="hljs-attr">&quot;modules&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;targets&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;browsers&quot;</span>: [<span class="hljs-string">&quot;&gt; 1%&quot;</span>, <span class="hljs-string">&quot;last 2 versions&quot;</span>, <span class="hljs-string">&quot;not ie &lt;= 8&quot;</span>]<br>  &#125;<br>&#125;]<br></code></pre></td></tr></table></figure><p>这个env是<code>@babel/preset-env</code>这个集合插件配置项，这里的配置项：</p><ul><li><code>modules</code>：”amd” | “umd” | “systemjs” | “commonjs” | “cjs” | “auto” | false, defaults to “auto”.<ul><li>意思就是让babel把es6 模块转化为其它模块化类型。如果选择 false 就不进行模块化转，我们的目标是浏览器，es6以前js是没有模块化的，commonjs、amd等只是社区方案，没有浏览器支持的，所以我们设置为false，如果我们写node上运行的代码，就要设置为”commonjs”</li></ul></li><li><code>target</code>：就是告诉babel你的js要兼容哪些环境，它会帮你将你写的js转译成目标环境兼容的js语法，这个具体配置可以看<a href="https://github.com/browserslist/browserslist">browserslist</a></li></ul><p><strong>js无论用什么新语法，<code>@babel/preset-env</code>都能帮你兼容到目标环境。</strong></p><p><code>@babel/preset-env</code>具体可以帮我们转化哪些呢？看这儿<a href="https://github.com/babel/babel/blob/master/packages/babel-preset-env/data/plugin-features.js">JavaScript新特性和Babel插件的映射关系</a>，这个是@babel/preset-env集合插件所包含的插件列表，每个插件对应转换一个新特性。</p><h2 id="stage-2"><a href="#stage-2" class="headerlink" title="stage-2"></a>stage-2</h2><p>在上面的配置中，我们看到env下面有个stage-2。stage-x，这里面包含的都是当年最新规范的草案，每年更新。细分为如下几步</p><ul><li>Stage 0 - 稻草人: 只是一个想法，经过 TC39 成员提出即可。</li><li>Stage 1 - 提案: 初步尝试。</li><li>Stage 2 - 初稿: 完成初步规范。</li><li>Stage 3 - 候选: 完成规范和浏览器初步实现。</li><li>Stage 4 - 完成: 将被添加到下一年度发布。</li></ul><p>官网里有一句话<code>It is important to note that @babel/preset-env does not support stage-x plugins.</code>，就是说@babel/preset-env中不包含在草案阶段的新属性的转换插件</p><blockquote><p>其实我们通过<a href="https://github.com/babel/babel/blob/master/packages/babel-preset-env/data/plugin-features.js">plugin-features</a>，以及<a href="https://github.com/tc39/proposals/blob/master/finished-proposals.md">proposals/finished-proposals</a>（其中2019就是今年的stage-4）,可以发现@babel/preset-env是包含了stage-4阶段的plugins的。</p></blockquote><p>比如写react的同学比较熟悉的<a href="https://github.com/tc39/proposal-decorators">decorators</a>目前就处于stage-2阶段，我们要用这些处于草案阶段的新属性，可以安装<code>npm i -D @babel/preset-stage-2</code>，然后在presets里写上stage-2，babel就会通过那些处于草案阶段的新属性的插件将我们代码中的用到的新属性转译成为es5。</p><p>此外，低一级的 stage 会包含所有高级 stage 的内容，例如 stage-2 会包含 stage-2, stage-3 的所有内容。</p><h2 id="babel-ployfill"><a href="#babel-ployfill" class="headerlink" title="babel-ployfill"></a>babel-ployfill</h2><p>Babel 几乎可以编译所有时新的 JavaScript 语法，但对于 APIs 来说却并非如此。比如说：<code>Promise</code>、<code>WeakMap</code>、<code>Array.from</code> 、<code>Object.assign</code>、<code>Array.prototype.includes</code>、<code>generator</code>等。为了解决这个问题，我们使用一种叫做 Polyfill（代码填充，也可译作兼容性补丁） 的技术。能让你提前使用还不可用的 APIs。</p><p>引入它很简单，我们<code>npm i -S @babel/polyfill</code>，</p><ul><li><p>在vue中的入口文件main.js文件的最上面：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">import</span> <span class="hljs-string">&quot;<span class="hljs-variable">@babel</span>/polyfill&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>或者在webpack入口里引入：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">module</span>.<span class="hljs-built_in">exports</span> = &#123;<br>  entry: [<span class="hljs-string">&quot;@babel/polyfill&quot;</span>, <span class="hljs-string">&quot;./main.js&quot;</span>],<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><p><strong>两者任选其一</strong></p><p>上面这两种方式是将整个polyfill都引入了，很多代码其实对我们是没有用的，比如，我们的env配置的是不需要兼容ie9以下的浏览器，这种引入方式把所有兼容ie的代码都引入了，包含ie8以下，所以，一般我们会在<code>.babelrc</code>文件里的env里配置下<code>useBuiltIns</code>参数，这样babel在引入的时候会根据我们env环境去加载相应的polyfill：<a href="https://babeljs.io/docs/en/next/babel-polyfill.html">详细</a></p><p>有如下三种方式</p><ul><li>如果在 .babelrc 中设置 useBuiltIns: ‘usage’，则不要在 webpack.config.js entry 数组或 源码中包含 @babel/polyfill。注意，仍然需要安装 babel-polyfill（就是说 npm i -S @babel/polyfill后就不管了）。</li><li>如果在 .babelrc 中设置 useBuiltIns: ‘entry’，在应用程序入口（main.js）的顶部引入 @babel/polyfill。</li><li>如果在 .babelrc 中没有明确设置useBuiltIns的值（就是你没有去配置这项）或者设置了 useBuiltIns: false，将 @babel/polyfill 添加到 webpack.config.js 的入口数组中。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> .babelrc<br>&#123;<br>  [<span class="hljs-string">&quot;env&quot;</span>, &#123;<br>    <span class="hljs-string">&quot;modules&quot;</span>: false,<br>    <span class="hljs-string">&quot;targets&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;browsers&quot;</span>: [<span class="hljs-string">&quot;&gt; 1%&quot;</span>, <span class="hljs-string">&quot;last 2 versions&quot;</span>, <span class="hljs-string">&quot;not ie &lt;= 8&quot;</span>]<br>    &#125;,<br>    <span class="hljs-regexp">//</span> 是否自动引入polyfill，开启此选项必须保证已经安装了babel-polyfill<br>    <span class="hljs-regexp">//</span> 在这里设置自动引入后，babel会根据你配置的兼容的环境，去按需加载polyfill的代码，这样能保证代码量最少<br>    <span class="hljs-regexp">//</span> 参数：Boolean，默认为false.<br>    <span class="hljs-string">&quot;useBuiltIns&quot;</span>: false<br>  &#125;]<br>&#125;<br><span class="hljs-regexp">//</span> webpack.base.conf.js<br>module.exports = &#123;<br>  entry: [<span class="hljs-string">&quot;@babel/polyfill&quot;</span>, <span class="hljs-string">&quot;./main.js&quot;</span>],<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="babel-plugin-transform-runtime"><a href="#babel-plugin-transform-runtime" class="headerlink" title="@babel/plugin-transform-runtime"></a>@babel/plugin-transform-runtime</h2><p>一个插件，通过重复使用babel注入的助手（helper）代码，来减少代码体积，我们看看它是如何工作的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">npm</span> <span class="hljs-string">i</span> <span class="hljs-string">-D</span> <span class="hljs-string">@babel/plugin-transform-runtime</span><br><br><span class="hljs-string">//</span> <span class="hljs-string">.babelrc</span><br>&#123;<br>  <span class="hljs-attr">&quot;plugins&quot;:</span> [<br>    <span class="hljs-string">&quot;@babel/plugin-transform-runtime&quot;</span>,<br>    <span class="hljs-string">//</span> <span class="hljs-string">默认配置</span><br>      &#123;<br>        <span class="hljs-attr">&quot;absoluteRuntime&quot;:</span> <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">&quot;corejs&quot;:</span> <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">&quot;helpers&quot;:</span> <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">&quot;regenerator&quot;:</span> <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">&quot;useESModules&quot;:</span> <span class="hljs-literal">false</span><br>      &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>比如这个es6的class类：在没有使用transform-runtime时，每个使用<code>class</code>函数处，Babel 会生成<code>class</code>的helper函数放置在文件顶部，就是说在多个文件里使用了<code>class</code>, babel就会在每个文件里面都生成相同的helper：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_classCallCheck</span>(<span class="hljs-params">instance, Constructor</span>) </span>&#123; <span class="hljs-keyword">if</span> (!(instance <span class="hljs-keyword">instanceof</span> Constructor)) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&quot;Cannot call a class as a function&quot;</span>); &#125; &#125;<br><br><span class="hljs-keyword">var</span> Person = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br>  _classCallCheck(<span class="hljs-built_in">this</span>, Person);<br>&#125;;<br></code></pre></td></tr></table></figure><p>这样不必要的重复会使我们的代码体积非常雍肿，transform-runtime就是来解决这个重复生成helper的问题的，它会将这个es6的<code>class</code>语法的<code>helper</code>函数放在<code>babel-runtime/helpers</code>里，然后在使用处通过require引入，这样就没必要在每个使用处重复定义<code>helper</code>了，达到了减少代码体积的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-keyword">var</span> _classCallCheck2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;babel-runtime/helpers/classCallCheck&quot;</span>);<br><br><span class="hljs-keyword">var</span> _classCallCheck3 = _interopRequireDefault(_classCallCheck2);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_interopRequireDefault</span>(<span class="hljs-params">obj</span>) </span>&#123; <span class="hljs-keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123; <span class="hljs-attr">default</span>: obj &#125;; &#125;<br><br><span class="hljs-keyword">var</span> Person = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br>  (<span class="hljs-number">0</span>, _classCallCheck3.default)(<span class="hljs-built_in">this</span>, Person);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="babel-runtime-对比-babel-polyfill"><a href="#babel-runtime-对比-babel-polyfill" class="headerlink" title="@babel/runtime 对比 babel-polyfill"></a>@babel/runtime 对比 babel-polyfill</h2><p>@babel/runtime和@babel/polyfill这两个模块功能几乎相同，就是转码新增 api</p><ul><li>@babel/polyfill 把原生的方法重写了，以promise为例，判断环境promise存不存在，不存在就写个全局作用域的promise。它会一次引入所有的api的polyfill，只是根据env配置引入的包大小可能会不同。</li><li>@babel/runtime 是写了个helper函数，以promise为例，你代码中的promise都会被换成_promise，然后babel会生成一个_promise helper函数，大致也是目标环境存在就用原生的，不存在就用polyfill的promise。而且这个是按需引入的，如果你的项目中只使用了promise，就只会引入promise的polyfill。但是它有个问题，实例上的方法无能为力，比如 Array上的form方法，String上的includes等</li></ul><p><strong>根据它们两的特点，@babel/polyfil一般用于前端项目，@babel/runtime一般用来写插件</strong></p><h1 id="三、几个常用的babel插件"><a href="#三、几个常用的babel插件" class="headerlink" title="三、几个常用的babel插件"></a>三、几个常用的babel插件</h1><h2 id="babel-cli"><a href="#babel-cli" class="headerlink" title="babel-cli"></a>babel-cli</h2><p>Babel 的 CLI 是一种在命令行下使用 Babel 编译文件的简单方法。有时候我们只是写一个插件，需要用babel转一下我们代码中的高阶语法，因为项目可能不太大，用不到构建工具，就可以用babel-cil。转换依据我们的<code>.babelrc</code>文件或者<code>package.json</code>中babel选项</p><ul><li><p>编译一个文件</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">babel <span class="hljs-keyword">my</span>-<span class="hljs-built_in">file</span>.js<br></code></pre></td></tr></table></figure></li><li><p>如果我们想要把一个目录整个编译成一个新的目录，可以使用 –out-dir 或者 -d。.</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal">$ babel src --<span class="hljs-keyword">out</span>-dir <span class="hljs-class"><span class="hljs-keyword">lib</span></span><br><span class="hljs-comment"># 或</span><br>$ babel src -d <span class="hljs-class"><span class="hljs-keyword">lib</span></span><br></code></pre></td></tr></table></figure></li></ul><h2 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h2><p>前端开发是一个工程化过程，依赖关系比较复杂，在一个稍微大点儿的项目中还真没法手动告诉babel要处理哪些文件。所以，webpack根据依赖关系，加载文件的时候遇到js文件后，会将文件内容的js字符串根据loader配置的先后顺序，挨个儿传递给它们处理，babel-loader就是其中之一。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><h2 id="用vue脚手架生成的项目，js怎么兼容到ie9"><a href="#用vue脚手架生成的项目，js怎么兼容到ie9" class="headerlink" title="用vue脚手架生成的项目，js怎么兼容到ie9"></a>用vue脚手架生成的项目，js怎么兼容到ie9</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> .babelrc<br>&#123;<br>    <span class="hljs-string">&quot;presets&quot;</span>: [<br>      [<span class="hljs-string">&quot;env&quot;</span>, &#123;<br>        <span class="hljs-regexp">//</span> 这里默认是false，不用再写一遍<br>-        <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;modules&quot;</span>: false,<br>        <span class="hljs-regexp">//</span> 一般不单独写出来，babel/preset-env会自个读取package里面的browserslist，与css兼容环境保持一致<br>        <span class="hljs-regexp">//</span> https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/browserslist/</span>browserslist<br>-      <span class="hljs-regexp">//</span>  <span class="hljs-string">&quot;targets&quot;</span>: &#123;<br>-        <span class="hljs-regexp">//</span>  <span class="hljs-string">&quot;browsers&quot;</span>: [<span class="hljs-string">&quot;&gt; 1%&quot;</span>, <span class="hljs-string">&quot;last 2 versions&quot;</span>, <span class="hljs-string">&quot;not ie &lt;= 8&quot;</span>]<br>-      <span class="hljs-regexp">//</span>  &#125;,<br>      &#125;],<br>      <span class="hljs-string">&quot;stage-2&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;plugins&quot;</span>: [<span class="hljs-string">&quot;transform-vue-jsx&quot;</span>, <span class="hljs-string">&quot;transform-runtime&quot;</span>]<br>  &#125;<br><br><span class="hljs-regexp">//</span> webpack.base.conf.js<br>module.exports = &#123;<br>  entry: [<span class="hljs-string">&quot;@babel/polyfill&quot;</span>, <span class="hljs-string">&quot;./main.js&quot;</span>],<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插件快照"><a href="#插件快照" class="headerlink" title="插件快照"></a>插件快照</h2><table><thead><tr><th>名称</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>babel/cli</td><td>允许命令行使用 babel 命令转译文件</td><td>一般在写插件时使用</td></tr><tr><td>babel/polyfill</td><td>为所有 API 增加兼容方法</td><td>需要在所有代码之前 require，且体积比较大</td></tr><tr><td>babel/plugin-transform-runtime</td><td>把帮助类方法从每次使用前定义改为统一 require，精简代码</td><td>—</td></tr><tr><td>babel/runtime</td><td>helper库</td><td>需要安装为依赖，而不是开发依赖，node环境使用，web环境不需要</td></tr><tr><td>babel/loader</td><td>babel插件在webpack项目中的一个入口</td><td>—</td></tr><tr><td>babel/core</td><td>babel的polyfill库</td><td>—</td></tr><tr><td>babel/preset-env</td><td>babel预制环境的集合插件，通过配置目标环境，转换标准上的新特性</td><td>只转新特性，不转api</td></tr><tr><td>babel/preset-stage-2</td><td>转换草案stage-2以及stage-3阶段的的新属性</td><td>—</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> babel vue-cli vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript从原型到原型链</title>
      <link href="/2019/01/10/JavaScript%E4%BB%8E%E5%8E%9F%E5%9E%8B%E5%88%B0%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2019/01/10/JavaScript%E4%BB%8E%E5%8E%9F%E5%9E%8B%E5%88%B0%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h4 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h4><p>我们先使用构造函数创建一个对象：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> <span class="hljs-comment">&#123;</span></span><br><span class="hljs-function"><span class="hljs-comment"> </span></span><br><span class="hljs-function"><span class="hljs-comment">&#125;</span></span><br><span class="hljs-function"><span class="hljs-title">var</span> <span class="hljs-title">person</span> = <span class="hljs-title">new</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span>;</span><br>person.<span class="hljs-keyword">name</span> = <span class="hljs-string">&#x27;name&#x27;</span>;<br>console.log(person.<span class="hljs-keyword">name</span>) <span class="hljs-comment">// name</span><br></code></pre></td></tr></table></figure><p>在这个例子中，Person就是一个构造函数，我们使用new创建了一个实例对象person。</p><p>很简单吧，接下来进入正题：</p><h4 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h4><p>每个函数都有一个prototype属性，就是我们经常在各种例子中看到的那个prototype，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br> <br>&#125;<br><span class="hljs-comment">// 虽然写在注释里，但是你要注意：</span><br><span class="hljs-comment">// prototype是函数才会有的属性</span><br>Person.prototype.name = <span class="hljs-string">&#x27;name&#x27;</span>;<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-built_in">console</span>.log(person1.name) <span class="hljs-comment">// name</span><br><span class="hljs-built_in">console</span>.log(person2.name) <span class="hljs-comment">// name</span><br></code></pre></td></tr></table></figure><p>那这个函数的prototype属性到底指向的是什么呢？是这个函数的原型吗？</p><p>其实，函数的prototype属性指向了一个对象，这个对象正是调用该构造函数而创建的实例的原型,也就是这个例子中的person1和person2的原型。</p><p>那么什么是原型呢？你可以这样理解：每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型”继承”属性。</p><p>让我们用一张图表示构造函数和实例原型之间的关系：<img src="D:\hexoblog\source\image\微信图片_20200818144346.jpg" alt="微信图片_20200818144346"></p><p>在这张图中我们用Object.prototype表示实例原型</p><p>那么我们该怎么表示实例与实例原型，也就是person和Person.prototype之间的关系呢，这时候我们就要讲到第二个属性：</p><h4 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong><strong>proto</strong></strong></h4><p>这是每一个JavaScript对象(除了null)都具有的一个属性，叫__proto__，这个属性会指向该对象的原型。</p><p>为了证明这一点,我们可以在火狐或者谷歌中输入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br> <br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-built_in">console</span>.log(person.__proto__ === Person.prototype); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>于是我们更新下关系图：</p><p><img src="D:\hexoblog\source\image\微信图片_20200818145511.jpg" alt="微信图片_20200818145511"></p><p>既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？</p><h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a><strong>constructor</strong></h4><p>指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数倒是有的，这就要讲到第三个属性：construcotr，每个原型都有一个constructor属性指向关联的构造函数</p><p>为了验证这一点，我们可以尝试：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> <span class="hljs-comment">&#123;</span></span><br><span class="hljs-function"><span class="hljs-comment"> </span></span><br><span class="hljs-function"><span class="hljs-comment">&#125;</span></span><br><span class="hljs-function"><span class="hljs-title">console</span>.<span class="hljs-title">log</span><span class="hljs-params">(Person === Person.prototype.<span class="hljs-keyword">constructor</span>)</span>;</span> <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>所以再更新下关系图：<img src="D:\hexoblog\source\image\微信图片_20200818145634.jpg" alt="微信图片_20200818145634"></p><p>综上我们已经得出：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> <span class="hljs-constructor">Person()</span> &#123;<br>&#125;<br> <br>var person = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Person()</span>;<br> <br>console.log(person.__proto__<span class="hljs-operator"> == </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Person</span>.</span></span>prototype) <span class="hljs-comment">// true</span><br>console.log(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Person</span>.</span></span>prototype.constructor<span class="hljs-operator"> == </span>Person) <span class="hljs-comment">// true</span><br><span class="hljs-comment">// 顺便学习一个ES5的方法,可以获得对象的原型</span><br>console.log(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>get<span class="hljs-constructor">PrototypeOf(<span class="hljs-params">person</span>)</span><span class="hljs-operator"> === </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Person</span>.</span></span>prototype) <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>了解了构造函数、实例原型、和实例之间的关系，接下来我们讲讲实例和原型的关系：</p><h4 id="实例与原型"><a href="#实例与原型" class="headerlink" title="实例与原型"></a><strong>实例与原型</strong></h4><p>当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。</p><p>举个例子：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> Person() &#123;<br> <br>&#125;<br> <br>Person.prototype.name = <span class="hljs-string">&#x27;name&#x27;</span>;<br> <br>var person = <span class="hljs-built_in">new</span> Person();<br> <br>person.name = <span class="hljs-string">&#x27;name of this person&#x27;</span>;<br>console.log(person.name) // <span class="hljs-type">name</span> <span class="hljs-keyword">of</span> this person<br> <br><span class="hljs-keyword">delete</span> person.name;<br>console.log(person.name) // <span class="hljs-type">name</span><br></code></pre></td></tr></table></figure><p>在这个例子中，我们设置了person的name属性，所以我们可以读取到为’name of this person’，当我们删除了person的name属性时，读取person.name，从person中找不到就会从person的原型也就是person.<strong>proto</strong> == Person.prototype中查找，幸运的是我们找到了为’name’，但是万一还没有找到呢？原型的原型又是什么呢？</p><p>在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var obj = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>();<br>obj.name = <span class="hljs-string">&#x27;name&#x27;</span><br>console.log(obj.name) // <span class="hljs-type">name</span><br></code></pre></td></tr></table></figure><p>所以原型对象是通过Object构造函数生成的，结合之前所讲,实例的__proto__指向构造函数的prototype,所以我们再更新下关系图：<img src="D:\hexoblog\source\image\微信图片_20200818145836.jpg" alt="微信图片_20200818145836"></p><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a><strong>原型链</strong></h4><p>那Object.prototype的原型呢？</p><p>null，嗯，就是null,所以查到Object.prototype就可以停止查找了</p><p>所以最后一张关系图就是<img src="D:\hexoblog\source\image\微信图片_20200818150041.jpg" alt="微信图片_20200818150041"></p><p>顺便还要说一下，图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a><strong>补充</strong></h4><p>最后，补充和纠正本文中一些不严谨的地方：</p><p>首先是constructor,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br> <br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-built_in">console</span>.log(person.constructor === Person); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>当获取person.constructor时，其实person中并没有constructor属性,当不能读取到constructor属性时，会从person的原型也就是Person.prototype中读取，正好原型中有该属性，所以</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">person.<span class="hljs-built_in">constructor</span> === Person.prototype.<span class="hljs-built_in">constructor</span><br></code></pre></td></tr></table></figure><p>其次是<strong>proto</strong>, 绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在与Person.prototype中，实际上，它是来自于Object.prototype，与其说是一个属性，不如说是一个getter/setter，当使用obj.__proto__时，可以理解成返回了Object.getPrototypeOf(obj)</p><p>最后是关于继承，前面我们讲到“每一个对象都会从原型”继承”属性”,实际上，继承是一个十分具有迷惑性的说法，引用《你不知道的JavaScript》中的话，就是：继承意味着复制操作，然而JavaScript默认并不会复制对象的属性，相反，JavaScript只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 原型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2018/12/18/%E9%97%AD%E5%8C%85/"/>
      <url>/2018/12/18/%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="1、什么是闭包？"><a href="#1、什么是闭包？" class="headerlink" title="1、什么是闭包？"></a>1、什么是闭包？</h1><p><strong>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。           —你不知道的JavaScript(上卷)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> a; <br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> a = demo();<br><span class="hljs-built_in">console</span>.log(a());  <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h1 id="2、闭包的构成"><a href="#2、闭包的构成" class="headerlink" title="2、闭包的构成"></a>2、闭包的构成</h1><p>闭包由两部分构成：<strong>函数，以及创建该函数的环境</strong>。</p><p>环境由闭包创建时在作用域中的任何局部变量组成。</p><h1 id="3、闭包的本质"><a href="#3、闭包的本质" class="headerlink" title="3、闭包的本质"></a>3、闭包的本质</h1><p><strong>闭包其实是JavaScript函数作用域的副作用产品。</strong></p><p><strong>闭包是一种特殊的对象。</strong></p><p>所谓<strong>有意栽花花不开,无心插柳柳成荫</strong>，不是JavaScript故意要使用闭包，而是由于JavaScript的函数内部可以使用函数外部的变量，这段代码又<strong>刚刚好</strong>符合闭包的定义。</p><p>在JavaScript中，外部函数调用之后其变量对象本应该被销毁，但闭包阻止了它们的销毁，我们仍然可以访问外部函数的变量对象。</p><p>进一步的说，通常情况下，函数的作用域及其所有变量都会在函数执行结束后被销毁。但是，如果创建了一个闭包的话，这个函数的作用域就会一直保存到闭包不存在为止。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addCalculator</span> (<span class="hljs-params">x</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">y</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> x + y;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> add1 = addCalculator(<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">console</span>.log(add1(<span class="hljs-number">1</span>)); <span class="hljs-comment">//2</span><br><br><span class="hljs-comment">// 释放对闭包的引用</span><br>add1 = <span class="hljs-literal">null</span>;<br><br><span class="hljs-built_in">console</span>.log(add1(<span class="hljs-number">1</span>)); <span class="hljs-comment">//Uncaught TypeError: add1 is not a function</span><br></code></pre></td></tr></table></figure><h1 id="4、闭包的应用"><a href="#4、闭包的应用" class="headerlink" title="4、闭包的应用"></a>4、闭包的应用</h1><p>我们可以用闭包来做什么呢？</p><p>了解Java的同学可能知道，Java是支持私有方法的，私有方法只能被一个类中的其他方法所调用，但是JavaScript没有提供这种原生支持，所以我们可以通过闭包来模拟私有方法。</p><p>私有方法自然有私有方法的好处，私有方法有利于限制对代码的访问，而且可以避免非核心的方法干扰代码的公共接口，减少全局污染。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> calculator = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addCalculator</span>(<span class="hljs-params">val</span>)</span>&#123;<br>        a += val<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        add1:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            addCalculator(<span class="hljs-number">1</span>);<br>        &#125;,<br>        add2:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            addCalculator(<span class="hljs-number">2</span>);<br>        &#125;,<br>        result:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> a<br>        &#125;<br>    &#125;<br>&#125;)();<br><br><span class="hljs-built_in">console</span>.log(calculator.result());  <span class="hljs-comment">// 1</span><br>calculator.add1();<br><span class="hljs-built_in">console</span>.log(calculator.result());  <span class="hljs-comment">// 2</span><br>calculator.add2();<br><span class="hljs-built_in">console</span>.log(calculator.result());  <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><p>上面这种方式也叫做**模块模式(module pattern)**。</p><h1 id="5、使用闭包的注意事项"><a href="#5、使用闭包的注意事项" class="headerlink" title="5、使用闭包的注意事项"></a>5、使用闭包的注意事项</h1><p><strong>内存泄漏</strong></p><p>因为闭包可以使函数中的变量都保存在内存中，造成很大的内存消耗，所以如果不是某些特定的任务需要使用闭包，我们不要滥用它。</p><p>很多博客中都提到了这一点，但是其实都是不完全对的。</p><p><strong>敲黑板！！！</strong></p><p>使用不当的闭包会在IE(IE9)之前造成内存泄漏问题。因为它的JavaScript引擎使用的垃圾回收算法是引用计数法，对于循环引用将会导致GC(下文会介绍)无法回收垃圾。</p><p>关于各个浏览器的闭包测试，详情请见：</p><blockquote><p>司徒正美-js闭包测试</p><p><a href="https://www.cnblogs.com/rubylouvre/p/3345294.html">https://www.cnblogs.com/rubylouvre/p/3345294.html</a></p></blockquote><h1 id="6、垃圾回收机制"><a href="#6、垃圾回收机制" class="headerlink" title="6、垃圾回收机制"></a>6、垃圾回收机制</h1><p>垃圾回收也就是<strong>GC(Garbage Collection)</strong></p><p>GC把程序不用的内存空间视为垃圾，找到它们并且将它们回收，让程序员可以再次利用这部分空间。</p><p>不是所有的语言都有GC，一般存在于高级语言中，如Java、JavaScript、Python。那么在没有GC的世界里，程序员就比较辛苦，只能手动去管理内存，比如在C语言中我们可以通过malloc/free，在C++中的new/delete来进行管理。</p><h1 id="7、垃圾回收算法"><a href="#7、垃圾回收算法" class="headerlink" title="7、垃圾回收算法"></a>7、垃圾回收算法</h1><p>因为这一部分的内容很多，本文只进行简单的讲解，如果想深入了解垃圾回收算法的同学可以在文末获取学习资料。</p><p><strong>GC标记-清除算法</strong></p><p>世界上首个值得纪念的GC算法是GC标记-清除算法。因为自其问世以来，一直到半个世纪后的今天，它依然是各种处理程序所用的伟大的算法。</p><p>GC标记-清除算法由标记阶段和清除阶段构成，标记阶段将所有的活动对象做上相应的标记，清除阶段把那些没有标记的对象，也就是非活动对象进行回收。在搜索对象并进行标记的时候使用了深度优先搜索，尽可能的从深度上搜索树形结构。</p><p><strong>优点</strong></p><p>1.算法简单，实现容易。</p><p>2.与保守式的GC算法兼容。</p><p><strong>缺点：</strong></p><p>1.在使用过程中会出现碎片化的情况，如同Windows的文件系统一样，导致无数的小分块散布在堆的各个地方。</p><p>2.分配速度，由于分块的不连续性，算法每次分配的时候都需要遍历空闲链表为了找到足够大的分块，这样最糟糕的情况就是遍历到最后才找到合适的分块，影响了分配速度。</p><p><strong>引用计数法</strong></p><p>这种方法中引入了计数器的概念，通过计数器来表示对象的“人气指数”，也就是有多少个程序引用了这个对象。当计数器(引用数)为0时，垃圾立刻被回收。</p><p><strong>优点:</strong></p><p>1.可以立即回收垃圾。</p><p>2.最大暂停的时间短。</p><p>3.并且没有必要沿指针查找。</p><p><strong>缺点:</strong></p><p>1.上文提到过的循环引用无法回收。</p><p>2.并且实现起来很复杂。</p><p>3.计数器值的增减处理十分繁重。</p><p>4.同时计数器需要占很多位，导致内存空间的使用效率大大降低。</p><p><strong>软件工程没有银弹</strong>，这些缺点也都有相应的办法进行解决，如果你想深入了解垃圾回收算法，可以学习这本书，建议支持正版。</p><blockquote><p>垃圾回收的算法与实现</p><p><a href="https://book.douban.com/subject/26821357/">https://book.douban.com/subject/26821357/</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this的值</title>
      <link href="/2018/11/15/this%E7%9A%84%E5%80%BC/"/>
      <url>/2018/11/15/this%E7%9A%84%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>首先需要从函数的调用开始讲起。</p><p>JS（ES5）里面有三种函数调用形式：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">func</span>(<span class="hljs-built_in">p1</span>, <span class="hljs-built_in">p2</span>)<br><span class="hljs-symbol">obj.child.method</span>(<span class="hljs-built_in">p1</span>, <span class="hljs-built_in">p2</span>)<br><span class="hljs-symbol">func.call</span>(context, <span class="hljs-built_in">p1</span>, <span class="hljs-built_in">p2</span>) <span class="hljs-comment">// 先不讲 apply</span><br></code></pre></td></tr></table></figure><p>一般，我们都知道前两种形式，而且认为前两种形式「优于」第三种形式。</p><p>从看到这篇文章起，一定要记住，第三种调用形式，才是正常调用形式：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">func</span>.call(context, p<span class="hljs-number">1</span>, p<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>其他两种都是语法糖，可以等价的变为call形式：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">func</span>(p<span class="hljs-number">1</span>, p<span class="hljs-number">2</span>) 等价于<br><span class="hljs-attribute">func</span>.call(undefined, p<span class="hljs-number">1</span>, p<span class="hljs-number">2</span>)<br> <br><span class="hljs-attribute">obj</span>.child.method(p<span class="hljs-number">1</span>, p<span class="hljs-number">2</span>) 等价于<br><span class="hljs-attribute">obj</span>.child.method.call(obj.child, p<span class="hljs-number">1</span>, p<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>此代码为「转换代码」。</p><p>至此我们的函数调用只有一种形式：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">func</span>.call(context, p<span class="hljs-number">1</span>, p<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>这样，this 就好解释了。</p><p>this，就是上面代码中的 context。就这么简单。</p><p>this 是你 call 一个函数时传的 context，由于你从来不用 call 形式的函数调用，所以你一直不知道。</p><p>先看 func(p1, p2) 中的 this 如何确定：</p><p>当你写下面代码时：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit">function <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span>&#123;</span><br>  console.<span class="hljs-built_in">log</span>(this)<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit">function <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span>&#123;</span><br>  console.<span class="hljs-built_in">log</span>(this)<br>&#125;<br> <br><span class="hljs-keyword">func</span>.<span class="hljs-built_in">call</span>(undefined) // 可以简写为 <span class="hljs-keyword">func</span>.<span class="hljs-built_in">call</span>()<br></code></pre></td></tr></table></figure><p>按理说打印出来的 this 应该就是 undefined 了吧，但是浏览器里有一条规则：</p><p>如果传的 context 是 null 或者 undefined，那么 window 对象就是默认的 context（严格模式下默认 context 是 undefined）</p><p>因此上面的打印结果是 window。</p><p>如果希望这里的 this 不是 window，很简单：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">func</span>.call(obj) <span class="hljs-regexp">//</span> 那么里面的 this 就是 obj 对象了<br></code></pre></td></tr></table></figure><p>再看 obj.child.method(p1, p2) 的 this 如何确定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>  foo: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<br>  &#125;<br>&#125;<br> <br>obj.foo()<br></code></pre></td></tr></table></figure><p>按照「转换代码」，我们将 obj.foo() 转换为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">obj</span><span class="hljs-selector-class">.foo</span><span class="hljs-selector-class">.call</span>(<span class="hljs-selector-tag">obj</span>)<br></code></pre></td></tr></table></figure><p>好了，this 就是 obj。搞定。</p><p>回到题目：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>  foo: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<br>  &#125;<br>&#125;<br> <br><span class="hljs-keyword">var</span> bar = obj.foo<br>obj.foo() <span class="hljs-comment">// 转换为 obj.foo.call(obj)，this 就是 obj</span><br>bar()<br><span class="hljs-comment">// 转换为 bar.call()</span><br><span class="hljs-comment">// 由于没有传 context</span><br><span class="hljs-comment">// 所以 this 就是 undefined</span><br><span class="hljs-comment">// 最后浏览器给你一个默认的 this —— window 对象</span><br></code></pre></td></tr></table></figure><h3 id="语法"><a href="#语法" class="headerlink" title="[]语法"></a>[]语法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">function fn ()&#123; console.log(this) &#125;<br>var arr = [fn, fn2]<br>arr[<span class="hljs-string">0</span>](<span class="hljs-link"></span>) // 这里面的 this 又是什么呢？<br></code></pre></td></tr></table></figure><p>我们可以把 arr<a href="">0</a> 想象为arr.0( )，虽然后者的语法错了，但是形式与转换代码里的 obj.child.method(p1, p2) 对应上了，于是就可以愉快的转换了：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"> arr[<span class="hljs-string">0</span>](<span class="hljs-link"></span>)<br>假想为    arr.0()<br>然后转换为 arr.0.call(arr)<br>那么里面的 this 就是 arr 了 :) <br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>this 就是 call 一个函数时，传入的 context。</li><li>如果函数调用形式不是 call 形式，请按照「转换代码」将其转换为 call 形式。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解JS作用域</title>
      <link href="/2018/10/28/%E7%90%86%E8%A7%A3JS%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>/2018/10/28/%E7%90%86%E8%A7%A3JS%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是作用域？"><a href="#什么是作用域？" class="headerlink" title="什么是作用域？"></a>什么是作用域？</h3><p>作用域是代码在运行时，各个变量、函数和对象的可访问性。换句话说，作用域决定了代码里的变量和其他资源在各个区域中的可见性。</p><h3 id="为什么需要作用域？最小访问原则"><a href="#为什么需要作用域？最小访问原则" class="headerlink" title="为什么需要作用域？最小访问原则"></a>为什么需要作用域？最小访问原则</h3><p>那么，限制变量的可见性，不允许代码中所有的东西在任意地方都可用的好处是什么？</p><p>其中一个优势，是作用域为代码提供了一个安全层级。计算机安全中，有个常规的原则是：用户只能访问他们当前需要的东西。</p><p>想想计算机管理员吧。他们在公司各个系统上拥有很多控制权，看起来甚至可以给予他们拥有全部权限的账号。假设你有一家公司，拥有三个管理员，他们都有系统的全部访问权限，并且一切运转正常。但是突然发生了一点意外，你的一个系统遭到恶意病毒攻击。现在你不知道这谁出的问题了吧？你这才意识到你应该只给他们基本用户的账号，并且只在需要时赋予他们完全的访问权。这能帮助你跟踪变化并记录每个人的操作。这叫做最小访问原则。眼熟吗？这个原则也应用于编程语言设计，在大多数编程语言（包括 JavaScript）中称为作用域。</p><p>在编程旅途中，作用域在代码中可以提升性能，跟踪 bug 并减少 bug。作用域还解决不同范围的同名变量命名问题。记住不要弄混作用域和上下文。它们是不同的特性！</p><h3 id="JavaScript中的作用域"><a href="#JavaScript中的作用域" class="headerlink" title="JavaScript中的作用域"></a>JavaScript中的作用域</h3><p>在 JavaScript 中有两种作用域</p><ul><li>全局作用域</li><li>局部作用域</li></ul><p>当变量定义在一个函数中时，变量就在局部作用域中，而定义在函数之外的变量则从属于全局作用域。每个函数在调用的时候会创建一个新的作用域。</p><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>当在文档中（document）编写 JavaScript 时，就已经在全局作用域中了。JavaScript 文档中（document）只有一个全局作用域。定义在函数之外的变量会被保存在全局作用域中。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// the scope <span class="hljs-keyword">is</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">global</span><br>var <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;Hammad&#x27;</span>;<br></code></pre></td></tr></table></figure><p>全局作用域里的变量能够在其他作用域中被访问和修改。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">var name = <span class="hljs-string">&#x27;Hammad&#x27;</span>;<br> <br>console.log(name); <span class="hljs-regexp">//</span> logs <span class="hljs-string">&#x27;Hammad&#x27;</span><br> <br><span class="hljs-keyword">function</span> logName() &#123;<br>    console.log(name); <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;name&#x27;</span> is accessible here and everywhere <span class="hljs-keyword">else</span><br>&#125;<br> <br>logName(); <span class="hljs-regexp">//</span> logs <span class="hljs-string">&#x27;Hammad&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>定义在函数中的变量就在局部作用域中。并且函数在每次调用时都有一个不同的作用域。这意味着同名变量可以用在不同的函数中。因为这些变量绑定在不同的函数中，拥有不同作用域，彼此之间不能访问。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> Global Scope<br><span class="hljs-keyword">function</span> someFunction() &#123;<br>    <span class="hljs-regexp">//</span> Local Scope <span class="hljs-comment">##1</span><br>    <span class="hljs-keyword">function</span> someOtherFunction() &#123;<br>        <span class="hljs-regexp">//</span> Local Scope <span class="hljs-comment">##2</span><br>    &#125;<br>&#125;<br> <br><span class="hljs-regexp">//</span> Global Scope<br><span class="hljs-keyword">function</span> anotherFunction() &#123;<br>    <span class="hljs-regexp">//</span> Local Scope <span class="hljs-comment">##3</span><br>&#125;<br><span class="hljs-regexp">//</span> Global Scope<br></code></pre></td></tr></table></figure><h3 id="块语句"><a href="#块语句" class="headerlink" title="块语句"></a>块语句</h3><p>块级声明包括if和switch，以及for和while循环，和函数不同，它们不会创建新的作用域。在块级声明中定义的变量从属于该块所在的作用域。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-comment">// this &#x27;if&#x27; conditional block doesn&#x27;t create a new scope</span><br>    var <span class="hljs-built_in">name</span> = <span class="hljs-string">&#x27;Hammad&#x27;</span>; <span class="hljs-comment">// name is still in the global scope</span><br>&#125;<br> <br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">name</span>); <span class="hljs-comment">// logs &#x27;Hammad&#x27;</span><br></code></pre></td></tr></table></figure><p>ECMAScript 6 引入了let和const关键字。这些关键字可以代替var。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">var name</span> = <span class="hljs-string">&#x27;Hammad&#x27;</span>;<br> <br><span class="hljs-attribute">let likes</span> = <span class="hljs-string">&#x27;Coding&#x27;</span>;<br><span class="hljs-attribute">const skills</span> = <span class="hljs-string">&#x27;Javascript and PHP&#x27;</span>;<br></code></pre></td></tr></table></figure><p>和var关键字不同，let和const关键字支持在块级声明中创建使用局部作用域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-comment">// this &#x27;if&#x27; conditional block doesn&#x27;t create a scope</span><br> <br>    <span class="hljs-comment">// name is in the global scope because of the &#x27;var&#x27; keyword</span><br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Hammad&#x27;</span>;<br>    <span class="hljs-comment">// likes is in the local scope because of the &#x27;let&#x27; keyword</span><br>    <span class="hljs-keyword">let</span> likes = <span class="hljs-string">&#x27;Coding&#x27;</span>;<br>    <span class="hljs-comment">// skills is in the local scope because of the &#x27;const&#x27; keyword</span><br>    <span class="hljs-keyword">const</span> skills = <span class="hljs-string">&#x27;JavaScript and PHP&#x27;</span>;<br>&#125;<br> <br><span class="hljs-built_in">console</span>.log(name); <span class="hljs-comment">// logs &#x27;Hammad&#x27;</span><br><span class="hljs-built_in">console</span>.log(likes); <span class="hljs-comment">// Uncaught ReferenceError: likes is not defined</span><br><span class="hljs-built_in">console</span>.log(skills); <span class="hljs-comment">// Uncaught ReferenceError: skills is not defined</span><br></code></pre></td></tr></table></figure><p>一个应用中全局作用域的生存周期与该应用相同。局部作用域只在该函数调用执行期间存在。</p><h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a><strong>上下文</strong></h3><p>我们经常弄混作用域和上下文，似乎两者是一个概念。但并非如此。作用域是我们上面讲到的那些，而上下文通常涉及到代码某些特殊部分中的this值。作用域指的是变量的可见性，而上下文指的是在相同的作用域中的this的值。我们当然也可以使用函数方法改变上下文，这个之后我们再讨论。在全局作用域中，上下文总是 Window 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// logs: Window &#123;speechSynthesis: SpeechSynthesis, caches: CacheStorage, localStorage: Storage…&#125;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logFunction</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br><span class="hljs-comment">// logs: Window &#123;speechSynthesis: SpeechSynthesis, caches: CacheStorage, localStorage: Storage…&#125;</span><br><span class="hljs-comment">// because logFunction() is not a property of an object</span><br>logFunction();<br></code></pre></td></tr></table></figure><p>如果作用域定义在一个对象的方法中，上下文就是这个方法所在的那个对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> &#123;</span><br>    logName() &#123;<br>        console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;<br> <br>(<span class="hljs-keyword">new</span> User).logName(); <span class="hljs-comment">// logs User &#123;&#125;</span><br></code></pre></td></tr></table></figure><p>(new User).logName()是创建对象关联到变量并调用logName方法的一种简便形式。通过这种方式我们并不需要创建一个新的变量。</p><p>可能注意到一点，就是如果使用new关键字调用函数时上下文的值会有差异。上下文会设置为被调用的函数的实例。考虑一下上面的这个例子，用new关键字调用的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logFunction</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br> <br><span class="hljs-keyword">new</span> logFunction(); <span class="hljs-comment">// logs logFunction &#123;&#125;</span><br></code></pre></td></tr></table></figure><p>当在严格模式（strict mode）中调用函数时，上下文默认是 undefined。</p><h3 id="执行环境"><a href="#执行环境" class="headerlink" title="执行环境"></a><strong>执行环境</strong></h3><p>为了解决掉我们从上面学习中会出现的各种困惑，“执行环境（context）”这个词中的“环境（context）”指的是作用域而并非上下文。这是一个怪异的命名约定，但由于 JavaScript 的文档如此，我们只好也这样约定。</p><p>JavaScript 是一种单线程语言，所以它同一时间只能执行单个任务。其他任务排列在执行环境中。当 JavaScript 解析器开始执行你的代码，环境（作用域）默认设为全局。全局环境添加到你的执行环境中，事实上这是执行环境里的第一个环境。</p><p>之后，每个函数调用都会添加它的环境到执行环境中。无论是函数内部还是其他地方调用函数，都会是相同的过程。</p><p>每个函数都会创建它自己的执行环境。</p><p>当浏览器执行完环境中的代码，这个环境会从执行环境中弹出，执行环境中当前环境的状态会转移到父级环境。浏览器总是先执行在执行栈顶的执行环境（事实上就是你代码最里层的作用域）。</p><p>全局环境只能有一个，函数环境可以有任意多个。</p><p>执行环境有两个阶段：创建和执行。</p><p><strong>创建阶段</strong></p><p>第一阶段是创建阶段，是函数刚被调用但代码并未执行的时候。创建阶段主要发生了 3 件事。</p><ul><li>创建变量对象</li><li>创建作用域链</li><li>设置上下文（this）的值</li></ul><p><strong>变量对象</strong></p><p>变量对象（Variable Object）也称为活动对象（activation object），包含所有变量、函数和其他在执行环境中定义的声明。当函数调用时，解析器扫描所有资源，包括函数参数、变量和其他声明。当所有东西装填进一个对象，这个对象就是变量对象。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-symbol">&#x27;variableObject</span>&#x27;: &#123;<br>    // contains <span class="hljs-keyword">function</span> <span class="hljs-title">arguments,</span> inner variable and <span class="hljs-keyword">function</span> <span class="hljs-title">declarations</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>作用域链</strong></p><p>在执行环境创建阶段，作用域链在变量对象之后创建。作用域链包含变量对象。作用域链用于解析变量。当解析一个变量时，JavaScript 开始从最内层沿着父级寻找所需的变量或其他资源。作用域链包含自己执行环境以及所有父级环境中包含的变量对象。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-string">&#x27;scopeChain&#x27;</span>: &#123;<br>    //<span class="hljs-built_in"> contains</span> its own <span class="hljs-keyword">variable</span> object <span class="hljs-keyword">and</span> other <span class="hljs-keyword">variable</span> objects <span class="hljs-keyword">of</span> the parent execution contexts<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>执行环境对象</strong></p><p>执行环境可以用下面抽象对象表示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">executionContextObject = &#123;<br>    <span class="hljs-string">&#x27;scopeChain&#x27;</span>: &#123;&#125;, <span class="hljs-regexp">//</span> contains its own variableObject and other variableObject of the parent execution contexts<br>    <span class="hljs-string">&#x27;variableObject&#x27;</span>: &#123;&#125;, <span class="hljs-regexp">//</span> contains <span class="hljs-keyword">function</span> arguments, inner variable and <span class="hljs-keyword">function</span> declarations<br>    <span class="hljs-string">&#x27;this&#x27;</span>: valueOfThis<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>代码执行阶段</strong></p><p>执行环境的第二个阶段就是代码执行阶段，进行其他赋值操作并且代码最终被执行。</p><h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><p>词法作用域的意思是在函数嵌套中，内层函数可以访问父级作用域的变量等资源。这意味着子函数词法绑定到了父级执行环境。词法作用域有时和静态作用域有关。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">grandfather</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Hammad&#x27;</span>;<br>    <span class="hljs-comment">// likes is not accessible here</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parent</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// name is accessible here</span><br>        <span class="hljs-comment">// likes is not accessible here</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">child</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-comment">// Innermost level of the scope chain</span><br>            <span class="hljs-comment">// name is also accessible here</span><br>            <span class="hljs-keyword">var</span> likes = <span class="hljs-string">&#x27;Coding&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>你可能注意到了词法作用域是向前的，意思是子执行环境可以访问name。但不是由父级向后的，意味着父级不能访问likes。这也告诉了我们，在不同执行环境中同名变量优先级在执行栈由上到下增加。一个变量和另一个变量同名，内层函数（执行栈顶的环境）有更高的优先级。</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包的概念和我们刚学习的词法作用域紧密相关。当内部函数试着访问外部函数的作用域链（词法作用域之外的变量）时产生闭包。闭包包括它们自己的作用域链、父级作用域链和全局作用域。</p><p>闭包不仅能访问外部函数的变量，也能访问外部函数的参数。</p><p>即使函数已经return，闭包仍然能访问外部函数的变量。这意味着return的函数允许持续访问外部函数的所有资源。</p><p>当你的外部函数return一个内部函数，调用外部函数时return的函数并不会被调用。你必须先用一个单独的变量保存外部函数的调用，然后将这个变量当做函数来调用。看下面这个例子：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">greet</span><span class="hljs-params">()</span></span> &#123;<br>    name = <span class="hljs-string">&#x27;Hammad&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span> &#123;<br>        console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;Hi &#x27;</span> + name);<br>    &#125;<br>&#125;<br> <br>greet(); // nothing happens, no errors<br> <br>// the returned <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">from</span> <span class="hljs-title">greet</span><span class="hljs-params">()</span></span> gets saved <span class="hljs-keyword">in</span> greetLetter<br>greetLetter = greet();<br> <br>// calling greetLetter calls the returned <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">from</span> <span class="hljs-title">the</span> <span class="hljs-title">greet</span><span class="hljs-params">()</span></span> <span class="hljs-function"><span class="hljs-keyword">function</span></span><br><span class="hljs-function"><span class="hljs-title">greetLetter</span><span class="hljs-params">()</span></span>; // logs <span class="hljs-string">&#x27;Hi Hammad&#x27;</span><br></code></pre></td></tr></table></figure><p>值得注意的是，即使在greet函数return后，greetLetter函数仍可以访问greet函数的name变量。如果不使用变量赋值来调用greet函数return的函数，一种方法是使用()两次()()，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">greet</span>(<span class="hljs-params"></span>) </span>&#123;<br>    name = <span class="hljs-string">&#x27;Hammad&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hi &#x27;</span> + name);<br>    &#125;<br>&#125;<br> <br>greet()(); <span class="hljs-comment">// logs &#x27;Hi Hammad&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="使用-call-，-apply-和-bind-改变上下文"><a href="#使用-call-，-apply-和-bind-改变上下文" class="headerlink" title="使用 .call()， .apply() 和 .bind() 改变上下文"></a><strong>使用 .call()， .apply() 和 .bind() 改变上下文</strong></h3><p>Call 和 Apply 函数来改变函数调用时的上下文。这带给你神奇的编程能力（和终极统治世界的能力）。你只需要使用 call 和 apply 函数并把上下文当做第一个参数传入，而不是使用括号来调用函数。函数自己的参数可以在上下文后面传入。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">function</span> <span class="hljs-selector-tag">hello</span>() &#123;<br>    <span class="hljs-comment">// do something...</span><br>&#125;<br> <br><span class="hljs-selector-tag">hello</span>(); <span class="hljs-comment">// the way you usually call it</span><br><span class="hljs-selector-tag">hello</span><span class="hljs-selector-class">.call</span>(context); <span class="hljs-comment">// here you can pass the context(value of this) as the first argument</span><br><span class="hljs-selector-tag">hello</span><span class="hljs-selector-class">.apply</span>(context); <span class="hljs-comment">// here you can pass the context(value of this) as the first argument</span><br></code></pre></td></tr></table></figure><p>.call()和.apply()的区别是 Call 中其他参数用逗号分隔传入，而 Apply 允许你传入一个参数数组。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">function</span> <span class="hljs-selector-tag">introduce</span>(name, interest) &#123;<br>    <span class="hljs-selector-tag">console</span><span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;Hi! I&#x27;</span>m <span class="hljs-string">&#x27;+ name +&#x27;</span> and I like <span class="hljs-string">&#x27;+ interest +&#x27;</span>.&#x27;);<br>    <span class="hljs-selector-tag">console</span><span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;The value of this is &#x27;</span>+ this +<span class="hljs-string">&#x27;.&#x27;</span>)<br>&#125;<br> <br><span class="hljs-selector-tag">introduce</span>(<span class="hljs-string">&#x27;Hammad&#x27;</span>, <span class="hljs-string">&#x27;Coding&#x27;</span>); <span class="hljs-comment">// the way you usually call it</span><br><span class="hljs-selector-tag">introduce</span><span class="hljs-selector-class">.call</span>(window, <span class="hljs-string">&#x27;Batman&#x27;</span>, <span class="hljs-string">&#x27;to save Gotham&#x27;</span>); <span class="hljs-comment">// pass the arguments one by one after the contextt</span><br><span class="hljs-selector-tag">introduce</span><span class="hljs-selector-class">.apply</span>(<span class="hljs-string">&#x27;Hi&#x27;</span>, [<span class="hljs-string">&#x27;Bruce Wayne&#x27;</span>, <span class="hljs-string">&#x27;businesses&#x27;</span>]); <span class="hljs-comment">// pass the arguments in an array after the context</span><br> <br><span class="hljs-comment">// Output:</span><br><span class="hljs-comment">// Hi! I&#x27;m Hammad and I like Coding.</span><br><span class="hljs-comment">// The value of this is [object Window].</span><br><span class="hljs-comment">// Hi! I&#x27;m Batman and I like to save Gotham.</span><br><span class="hljs-comment">// The value of this is [object Window].</span><br><span class="hljs-comment">// Hi! I&#x27;m Bruce Wayne and I like businesses.</span><br><span class="hljs-comment">// The value of this is Hi.</span><br></code></pre></td></tr></table></figure><p>Call 比 Apply 的效率高一点。</p><p>下面这个例子列举文档中所有项目，然后依次在控制台打印出来。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Things to learn<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Things to Learn to Rule the World<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Learn PHP<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Learn Laravel<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Learn JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Learn VueJS<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Learn CLI<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Learn Git<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Learn Astral Projection<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-comment">// Saves a NodeList of all list items on the page in listItems</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> listItems = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;ul li&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-comment">// Loops through each of the Node in the listItems NodeList and logs its content</span></span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; listItems.length; i++) &#123;</span><br><span class="javascript">          (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.innerHTML);</span><br>          &#125;).call(listItems[i]);<br>        &#125;<br> <br><span class="javascript">        <span class="hljs-comment">// Output logs:</span></span><br><span class="javascript">        <span class="hljs-comment">// Learn PHP</span></span><br><span class="javascript">        <span class="hljs-comment">// Learn Laravel</span></span><br><span class="javascript">        <span class="hljs-comment">// Learn JavaScript</span></span><br><span class="javascript">        <span class="hljs-comment">// Learn VueJS</span></span><br><span class="javascript">        <span class="hljs-comment">// Learn CLI</span></span><br><span class="javascript">        <span class="hljs-comment">// Learn Git</span></span><br><span class="javascript">        <span class="hljs-comment">// Learn Astral Projection</span></span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>HTML文档中仅包含一个无序列表。JavaScript 从 DOM 中选取它们。列表项会被从头到尾循环一遍。在循环时，我们把列表项的内容输出到控制台。</p><p>输出语句包含在由括号包裹的函数中，然后调用call函数。相应的列表项传入 call 函数，确保控制台输出正确对象的 innerHTML。</p><p>对象可以有方法，同样函数对象也可以有方法。事实上，JavaScript 函数有 4 个内置方法：</p><ul><li>Function.prototype.apply()</li><li>Function.prototype.bind() (Introduced in ECMAScript 5 (ES5))</li><li>Function.prototype.call()</li><li>Function.prototype.toString()</li></ul><p>Function.prototype.toString()返回函数代码的字符串表示。</p><p>到现在为止，我们讨论了.call()、.apply()和toString()。与 Call 和 Apply 不同，Bind 并不是自己调用函数，它只是在函数调用之前绑定上下文和其他参数。在上面提到的例子中使用 Bind：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">(<span class="hljs-keyword">function</span> introduce(<span class="hljs-type">name</span>, interest) &#123;<br>    console.log(<span class="hljs-string">&#x27;Hi! I&#x27;</span>m <span class="hljs-string">&#x27;+ name +&#x27;</span> <span class="hljs-keyword">and</span> I <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;+ interest +&#x27;</span>.<span class="hljs-string">&#x27;);</span><br><span class="hljs-string">    console.log(&#x27;</span>The <span class="hljs-keyword">value</span> <span class="hljs-keyword">of</span> this <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;+ this +&#x27;</span>.<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">&#125;).bind(window, &#x27;</span>Hammad<span class="hljs-string">&#x27;, &#x27;</span>Cosmology<span class="hljs-string">&#x27;)();</span><br><span class="hljs-string"> </span><br><span class="hljs-string">// logs:</span><br><span class="hljs-string">// Hi! I&#x27;</span>m Hammad <span class="hljs-keyword">and</span> I <span class="hljs-keyword">like</span> Cosmology.<br>// The <span class="hljs-keyword">value</span> <span class="hljs-keyword">of</span> this <span class="hljs-keyword">is</span> [<span class="hljs-keyword">object</span> <span class="hljs-keyword">Window</span>].<br></code></pre></td></tr></table></figure><p>Bind 像call函数一样用逗号分隔其他传入参数，不像apply那样用数组传入参数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 作用域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数的继承</title>
      <link href="/2018/08/17/%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
      <url>/2018/08/17/%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<p>说说对象之间的“继承”的五种方法。</p><p>比如，现在有一个“动物”对象的构造函数。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Animal</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">this</span>.species = <span class="hljs-string">&quot;动物&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>还有一个“猫”对象的构造函数。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cat</span>(<span class="hljs-params">name,color</span>)</span>&#123;<br>    <span class="hljs-keyword">this</span>.name = name;<br>    <span class="hljs-keyword">this</span>.color = <span class="hljs-built_in">color</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>怎样才能使“猫”继承“动物”呢？</p><h3 id="1、构造函数绑定"><a href="#1、构造函数绑定" class="headerlink" title="1、构造函数绑定"></a>1、构造函数绑定</h3><p>第一种方法也是最简单的方法，使用call或apply方法，将父对象的构造函数绑定在子对象上，即在子对象构造函数中加一行：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cat</span>(<span class="hljs-params">name,color</span>)</span>&#123;<br>　  Animal.apply(<span class="hljs-keyword">this</span>, <span class="hljs-built_in">arguments</span>);<br>　　<span class="hljs-keyword">this</span>.name = name;<br>　　<span class="hljs-keyword">this</span>.color = <span class="hljs-built_in">color</span>;<br>&#125;<br><span class="hljs-keyword">var</span> cat1 = <span class="hljs-keyword">new</span> Cat(<span class="hljs-string">&quot;大毛&quot;</span>,<span class="hljs-string">&quot;黄色&quot;</span>);<br>alert(cat1.species); <span class="hljs-comment">// 动物</span><br></code></pre></td></tr></table></figure><h3 id="2、prototype模式"><a href="#2、prototype模式" class="headerlink" title="2、prototype模式"></a>2、prototype模式</h3><p>第二种方法更常见，使用prototype属性。</p><p>如果”猫”的prototype对象，指向一个Animal的实例，那么所有”猫”的实例，就能继承Animal了。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Cat</span>.</span></span>prototype = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Animal()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Cat</span>.</span></span>prototype.constructor = Cat;<br>var cat1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Cat(<span class="hljs-string">&quot;大毛&quot;</span>,<span class="hljs-string">&quot;黄色&quot;</span>)</span>;<br>alert(cat1.species); <span class="hljs-comment">// 动物</span><br></code></pre></td></tr></table></figure><p>代码的第一行，我们将Cat的prototype对象指向一个Animal的实例。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Cat</span>.</span></span>prototype = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Animal()</span>;<br></code></pre></td></tr></table></figure><p>它相当于完全删除了prototype 对象原先的值，然后赋予一个新值。但是，第二行又是什么意思呢？</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Cat.prototype.constructor</span> = Cat<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>原来，任何一个prototype对象都有一个constructor属性，指向它的构造函数。如果没有”Cat.prototype = new Animal();”这一行，Cat.prototype.constructor是指向Cat的；加了这一行以后，Cat.prototype.constructor指向Animal。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">alert(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Cat</span>.</span></span>prototype.constructor<span class="hljs-operator"> == </span>Animal); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>更重要的是，每一个实例也有一个constructor属性，默认调用prototype对象的constructor属性。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">alert(cat1.<span class="hljs-keyword">constructor</span> == Cat.prototype.<span class="hljs-keyword">constructor</span>);   <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>因此，在运行”Cat.prototype = new Animal();”这一行之后，cat1.constructor也指向Animal！</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">alert<span class="hljs-params">(cat1.<span class="hljs-attr">constructor</span> == Animal)</span>;   <span class="hljs-string">//</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>这显然会导致继承链的紊乱（cat1明明是用构造函数Cat生成的），因此我们必须手动纠正，将Cat.prototype对象的constructor值改为Cat。这就是第二行的意思。</p><p>这是很重要的一点，编程时务必要遵守。下文都遵循这一点，即如果替换了prototype对象，</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">o</span>.proto<span class="hljs-keyword">type</span> = &#123;&#125;;<br></code></pre></td></tr></table></figure><p>那么，下一步必然是为新的prototype对象加上constructor属性，并将这个属性指回原来的构造函数。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">o.prototype.constructor</span> = o<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="3、直接继承prototype"><a href="#3、直接继承prototype" class="headerlink" title="3、直接继承prototype"></a>3、直接继承prototype</h3><p>第三种方法是对第二种方法的改进。由于Animal对象中，不变的属性都可以直接写入Animal.prototype。所以，我们也可以让Cat()跳过 Animal()，直接继承Animal.prototype。</p><p>现在，我们先将Animal对象改写：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> <span class="hljs-constructor">Animal()</span>&#123; &#125;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Animal</span>.</span></span>prototype.species = <span class="hljs-string">&quot;动物&quot;</span>;<br></code></pre></td></tr></table></figure><p>然后，将Cat的prototype对象，然后指向Animal的prototype对象，这样就完成了继承。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Cat</span>.</span></span>prototype = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Animal</span>.</span></span>prototype;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Cat</span>.</span></span>prototype.constructor = Cat;<br>var cat1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Cat(<span class="hljs-string">&quot;大毛&quot;</span>,<span class="hljs-string">&quot;黄色&quot;</span>)</span>;<br>alert(cat1.species); <span class="hljs-comment">// 动物</span><br></code></pre></td></tr></table></figure><p>与前一种方法相比，这样做的优点是效率比较高（不用执行和建立Animal的实例了），比较省内存。缺点是 Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。</p><p>所以，上面这一段代码其实是有问题的。请看第二行</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Cat.prototype.constructor</span> = Cat<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这一句实际上把Animal.prototype对象的constructor属性也改掉了！</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">alert(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Animal</span>.</span></span>prototype.constructor);    <span class="hljs-comment">// Cat</span><br></code></pre></td></tr></table></figure><h3 id="4、利用空对象作为中介"><a href="#4、利用空对象作为中介" class="headerlink" title="4、利用空对象作为中介"></a>4、利用空对象作为中介</h3>]]></content>
      
      
      
        <tags>
            
            <tag> prototype  object </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
