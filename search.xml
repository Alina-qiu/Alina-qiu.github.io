<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/08/13/hello-world/"/>
      <url>/2020/08/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML插入图片与CSS背景图片的区别</title>
      <link href="/2020/08/12/%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E4%B8%8E%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/08/12/%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E4%B8%8E%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>1、插入图片img为行内块元素，是一个盒子模型，占文档流的位置，图片加载出错时会出现红叉；</p><p>​      背景图片不占文档流，在图片加载失败时，不会有占位标记，图片加载出错时不会出现红叉。</p><p>2、插入图片移动位置通过margin 和 padding实现；</p><p>​      背景图片移动通过background-position移动。</p><p>3、插入图片更改大小通过width 和 height实现；</p><p>​      背景图片只能通过background-size。</p><p>4、插入图片一般用在产片展示类，背景图片用于小图标背景或者超大背景图片。</p><p>5、盒子中使用背景图片需要注意盒子尺寸和背景图片尺寸匹配。</p><p>6、直接插入图片会多出4px，设置背景图片给定高度不会</p><p>​      去除图片底侧缝隙(低版本浏览器)：</p><p>​      解决方法一：给img添加display: block; 转换为块级元素</p><p>​      解决方法二：给img添加vertical-align: middle | top</p><p>7、css中的图片以背景图形式存在，写在html中的图片以标签形式存在。在网页加载过程中，以css背景存在的图片会等到html结构加载完成才开始加载；</p><p>而html中的img标签是网页结构（内容）的一部分会在加载结构的过程中加载。</p><p>8、在一个单纯由HTML和CSS组成的页面中，背景图片总是最后加载的，那么假若想要使用较小的背景图片作为占位符，用于在加载较大的图片或者Flash文件时给用户以提示，大部分时候恐怕是达不到效果的，因为背景图片有时甚至会在大图片或Flash文件加载完成之后才会被加载。</p><p>9、通常非内容的图片（即用来修饰页面的元素）就写在css里，如果是内容性的图片就写在html中。比如，你要做一个漂亮相框的相册，那么修饰边框的图片就写在css里，相框里的内容照片就写在html中。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2018/12/18/%E9%97%AD%E5%8C%85/"/>
      <url>/2018/12/18/%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="1、什么是闭包？"><a href="#1、什么是闭包？" class="headerlink" title="1、什么是闭包？"></a>1、什么是闭包？</h1><p><strong>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。           —你不知道的JavaScript(上卷)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> a; <br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> a = demo();<br><span class="hljs-built_in">console</span>.log(a());  <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h1 id="2、闭包的构成"><a href="#2、闭包的构成" class="headerlink" title="2、闭包的构成"></a>2、闭包的构成</h1><p>闭包由两部分构成：<strong>函数，以及创建该函数的环境</strong>。</p><p>环境由闭包创建时在作用域中的任何局部变量组成。</p><h1 id="3、闭包的本质"><a href="#3、闭包的本质" class="headerlink" title="3、闭包的本质"></a>3、闭包的本质</h1><p><strong>闭包其实是JavaScript函数作用域的副作用产品。</strong></p><p><strong>闭包是一种特殊的对象。</strong></p><p>所谓<strong>有意栽花花不开,无心插柳柳成荫</strong>，不是JavaScript故意要使用闭包，而是由于JavaScript的函数内部可以使用函数外部的变量，这段代码又<strong>刚刚好</strong>符合闭包的定义。</p><p>在JavaScript中，外部函数调用之后其变量对象本应该被销毁，但闭包阻止了它们的销毁，我们仍然可以访问外部函数的变量对象。</p><p>进一步的说，通常情况下，函数的作用域及其所有变量都会在函数执行结束后被销毁。但是，如果创建了一个闭包的话，这个函数的作用域就会一直保存到闭包不存在为止。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addCalculator</span> (<span class="hljs-params">x</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">y</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> x + y;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> add1 = addCalculator(<span class="hljs-number">1</span>);<br><br><span class="hljs-built_in">console</span>.log(add1(<span class="hljs-number">1</span>)); <span class="hljs-comment">//2</span><br><br><span class="hljs-comment">// 释放对闭包的引用</span><br>add1 = <span class="hljs-literal">null</span>;<br><br><span class="hljs-built_in">console</span>.log(add1(<span class="hljs-number">1</span>)); <span class="hljs-comment">//Uncaught TypeError: add1 is not a function</span><br></code></pre></td></tr></table></figure><h1 id="4、闭包的应用"><a href="#4、闭包的应用" class="headerlink" title="4、闭包的应用"></a>4、闭包的应用</h1><p>我们可以用闭包来做什么呢？</p><p>了解Java的同学可能知道，Java是支持私有方法的，私有方法只能被一个类中的其他方法所调用，但是JavaScript没有提供这种原生支持，所以我们可以通过闭包来模拟私有方法。</p><p>私有方法自然有私有方法的好处，私有方法有利于限制对代码的访问，而且可以避免非核心的方法干扰代码的公共接口，减少全局污染。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> calculator = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addCalculator</span>(<span class="hljs-params">val</span>)</span>&#123;<br>        a += val<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        add1:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            addCalculator(<span class="hljs-number">1</span>);<br>        &#125;,<br>        add2:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            addCalculator(<span class="hljs-number">2</span>);<br>        &#125;,<br>        result:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> a<br>        &#125;<br>    &#125;<br>&#125;)();<br><br><span class="hljs-built_in">console</span>.log(calculator.result());  <span class="hljs-comment">// 1</span><br>calculator.add1();<br><span class="hljs-built_in">console</span>.log(calculator.result());  <span class="hljs-comment">// 2</span><br>calculator.add2();<br><span class="hljs-built_in">console</span>.log(calculator.result());  <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><p>上面这种方式也叫做**模块模式(module pattern)**。</p><h1 id="5、使用闭包的注意事项"><a href="#5、使用闭包的注意事项" class="headerlink" title="5、使用闭包的注意事项"></a>5、使用闭包的注意事项</h1><p><strong>内存泄漏</strong></p><p>因为闭包可以使函数中的变量都保存在内存中，造成很大的内存消耗，所以如果不是某些特定的任务需要使用闭包，我们不要滥用它。</p><p>很多博客中都提到了这一点，但是其实都是不完全对的。</p><p><strong>敲黑板！！！</strong></p><p>使用不当的闭包会在IE(IE9)之前造成内存泄漏问题。因为它的JavaScript引擎使用的垃圾回收算法是引用计数法，对于循环引用将会导致GC(下文会介绍)无法回收垃圾。</p><p>关于各个浏览器的闭包测试，详情请见：</p><blockquote><p>司徒正美-js闭包测试</p><p><a href="https://www.cnblogs.com/rubylouvre/p/3345294.html">https://www.cnblogs.com/rubylouvre/p/3345294.html</a></p></blockquote><h1 id="6、垃圾回收机制"><a href="#6、垃圾回收机制" class="headerlink" title="6、垃圾回收机制"></a>6、垃圾回收机制</h1><p>垃圾回收也就是<strong>GC(Garbage Collection)</strong></p><p>GC把程序不用的内存空间视为垃圾，找到它们并且将它们回收，让程序员可以再次利用这部分空间。</p><p>不是所有的语言都有GC，一般存在于高级语言中，如Java、JavaScript、Python。那么在没有GC的世界里，程序员就比较辛苦，只能手动去管理内存，比如在C语言中我们可以通过malloc/free，在C++中的new/delete来进行管理。</p><h1 id="7、垃圾回收算法"><a href="#7、垃圾回收算法" class="headerlink" title="7、垃圾回收算法"></a>7、垃圾回收算法</h1><p>因为这一部分的内容很多，本文只进行简单的讲解，如果想深入了解垃圾回收算法的同学可以在文末获取学习资料。</p><p><strong>GC标记-清除算法</strong></p><p>世界上首个值得纪念的GC算法是GC标记-清除算法。因为自其问世以来，一直到半个世纪后的今天，它依然是各种处理程序所用的伟大的算法。</p><p>GC标记-清除算法由标记阶段和清除阶段构成，标记阶段将所有的活动对象做上相应的标记，清除阶段把那些没有标记的对象，也就是非活动对象进行回收。在搜索对象并进行标记的时候使用了深度优先搜索，尽可能的从深度上搜索树形结构。</p><p><strong>优点</strong></p><p>1.算法简单，实现容易。</p><p>2.与保守式的GC算法兼容。</p><p><strong>缺点：</strong></p><p>1.在使用过程中会出现碎片化的情况，如同Windows的文件系统一样，导致无数的小分块散布在堆的各个地方。</p><p>2.分配速度，由于分块的不连续性，算法每次分配的时候都需要遍历空闲链表为了找到足够大的分块，这样最糟糕的情况就是遍历到最后才找到合适的分块，影响了分配速度。</p><p><strong>引用计数法</strong></p><p>这种方法中引入了计数器的概念，通过计数器来表示对象的“人气指数”，也就是有多少个程序引用了这个对象。当计数器(引用数)为0时，垃圾立刻被回收。</p><p><strong>优点:</strong></p><p>1.可以立即回收垃圾。</p><p>2.最大暂停的时间短。</p><p>3.并且没有必要沿指针查找。</p><p><strong>缺点:</strong></p><p>1.上文提到过的循环引用无法回收。</p><p>2.并且实现起来很复杂。</p><p>3.计数器值的增减处理十分繁重。</p><p>4.同时计数器需要占很多位，导致内存空间的使用效率大大降低。</p><p><strong>软件工程没有银弹</strong>，这些缺点也都有相应的办法进行解决，如果你想深入了解垃圾回收算法，可以学习这本书，建议支持正版。</p><blockquote><p>垃圾回收的算法与实现</p><p><a href="https://book.douban.com/subject/26821357/">https://book.douban.com/subject/26821357/</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
